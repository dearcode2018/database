数据库-索引

参考: http://blog.csdn.net/kennyrose/article/details/7532032

概念
1) 数据库索引是数据库管理系统中一个排序的数据结构，以协助快速查询、更新数据表中的数据。
2) 索引的实现通常使用B树及其变种B+树
3) 在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用(指向)数据，这样
就可以在这些数据结构上实现高级查找算法。
4) 为表设置索引要付出代价的，A. 增加了数据库的存储空间 B. 在插入和更新数据时要花费较多的时间(因为索引也要更新).

在某一列设置了索引之后，该索引就维护一个二叉查找树，每个节点分别包含索引键值和一个指向对应数据行的物理地址的
指针，这样就可以运用二叉查找在O(log2n)的复杂度内获取到相应的数据.

优点: 创建索引可以大大提高系统的性能
1) 通过创建唯一索引，可以保证数据库中每一行数据的唯一性
2) 可以大大加快数据的检索速度
3) 为外键字段创建索引，可以加速表与表之前的连接
4) 在分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间
5) 在查询中使用查询优化隐藏器，提高系统的性能

索引不能过多使用: (创建的时候 占用时间和空间，修改的时候 占用时间)
1) 创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。
2) 索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立聚簇索引，那么需要的空间就会更大。
3) 当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度。


在哪些列上创建索引
1) 经常需要搜索的列
2) 作为主键的列，强制该列的唯一性和组织表中数据的排列结构
3) 经常连接的列上，主要是外键，可以加快连接的速度
4) 经常要根据范围进行搜索的列，因为索引已经排序，其指定的范围是连续的
5) 经常需要排序的列上，因为索引已经排序，这样查询可以利用索引的排序，加快排序时间
6) 经常使用WHERE子句的列上，加快条件的判断速度

不应该创建索引
1) 查询中很少使用或者参考的列
2) 只有少数数据的列，例如 人事表的性别列，只有 男/女2种值，增加索引并不能明显提高检索速度
3) 定义为text/image/bit数据类型的列，这些要么数据量很大，要么取值很少
4) 修改性能远大于检索性能时，不应该创建索引，因为修改性能和检索性能是相互矛盾的，当索引增加时，
会提高检索性能，但会降低修改性能。


索引类型
1) 唯一索引
不允许任何2行具有相同索引值的索引。
当现有数据中存在重复的键值时，大多数数据库不允许将新创建的唯一索引与表一起保存。数据库还可能防止添加将
在表中创建重复键值的新数据。例如，如果在employee表中职员的姓上创建了唯一索引，则任何2个员工都不能同姓。

2) 主键索引
主键: 数据表中经常有一列或列组合，其值唯一标识表中的每一行，称为主键.
在数据库关系图中为表定义主键将自动创建主键索引，主键索引是唯一索引的特定类型。当在查询中使用主键索引，
它还允许对数据的快速访问。

3) 聚集索引
在聚集索引中，表数据按照索引的顺序来存储，一个表只能包含一个聚集索引.
如果索引不是聚集索引，则表中行的物理顺序与键值的逻辑顺序不匹配。与非聚集索引相比，聚集索引通常提供更快
的数据访问速度。
聚集索引可以避免[数据插入]操作集中于表的最后一个数据页.
对于聚集索引，叶子节点直接存储了真实的数据行，不再有另外单独的数据页。
插入操作根据索引找到对应的数据页，然后挪动已有的记录为新数据腾出空间，最后插入数据。
如果数据页已满，则需要拆分数据页，页拆分是一种非常耗资源的操作，一般数据库系统中会有相应的机制尽量减少
页拆分的次数，通常是通过为每页预留空间来实现。

4) 非聚集索引
表数据存储顺序与索引顺序无关，

局部性原理
1) 当一个数据被用到时，其附近的数据通常会马上被使用，程序运行期间所需要的数据通常比较集中.
2) 硬件及操作系统往往将主存和磁盘存储分区分割为连续的大小相等的块，每个存储块称为一页，在许多OS中，页大小
通常为4k.
3) 

B-/+Tree索引性能
1) 根据B-Tree的定义，可知检索一次最多需要访问h个节点，数据库系统的设计者巧妙利用了磁盘预读原，将一个节点
的大小设为等于一个页，这样每个节点只需一次I/O就可以完全载入
2) 每次创建节点时，直接申请一个页的空间，这样就保证一个节点物理上也存储在一个页，这样就实现了一个节点只需
一次I/O。


索引的存储
1) 一条索引记录包含的基本信息包括: A. 键值(即定义索引时指定的所有字段的值) + 逻辑指针(指向数据页或另一索引页)

2) 








